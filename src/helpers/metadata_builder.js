// Generated by CoffeeScript 1.6.2
(function() {
  var ArgumentNullException, domains, getDomainsValidationAttrs, proxyDomainValidationAttrs, proxyValidationContainer;

  ArgumentNullException = require("./custom_exception").ArgumentNullException;

  proxyValidationContainer = {};

  domains = require('./domains');

  getDomainsValidationAttrs = function(model) {
    var attr, md, metadata, metadatas, valDomAttrs, validators;

    if (model == null) {
      return new ArgumentNullException('The model should exists and have a metadatas property.');
    }
    metadatas = model.metadatas;
    if (metadatas == null) {
      throw new ArgumentNullException('The model should have metadatas.');
    }
    if (metadatas == null) {
      metadatas = constructModelMetaDatas();
    }
    valDomAttrs = {};
    for (attr in metadatas) {
      metadata = {};
      md = metadatas[attr] || {};
      if (((md.isValidationOff != null) && md.isValidationOff === false) || (md.isValidationOff == null)) {
        if (md.metadata != null) {
          _.extend(metadata, md.metadata);
        }
        if (md.domain != null) {
          metadata.domain = md.domain;
        }
        if (md.required != null) {
          metadata.required = md.required;
        }
        validators = [];
        if (metadata.required) {
          validators.push({
            "type": "required",
            "value": true
          });
        }
        if ((metadata.domain != null) && (domains[metadata.domain] != null)) {
          validators = _.union(validators, domains[metadata.domain].validation);
        }
        valDomAttrs[attr] = validators;
      }
    }
    return valDomAttrs;
  };

  proxyDomainValidationAttrs = function(model) {
    return getDomainsValidationAttrs(model);
    if ((model.modelName != null) && (proxyValidationContainer[model.modelName] != null)) {
      return proxyValidationContainer[model.modelName];
    }
    if (model.modelName != null) {
      return proxyValidationContainer[model.modelName] = getDomainsValidationAttrs(model);
    } else {
      return getDomainsValidationAttrs(model);
    }
  };

  module.exports = {
    getDomainsValidationAttrs: getDomainsValidationAttrs,
    domainAttributes: proxyDomainValidationAttrs
  };

}).call(this);

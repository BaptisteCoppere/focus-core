// Generated by CoffeeScript 1.6.2
(function() {
  var S4, domains_definition, getMetadataFor, guid;

  domains_definition = require('./domains');

  Handlebars.registerHelper('pick', function(val, options) {
    return options.hash[val];
  });

  Handlebars.registerHelper("t", function(i18n_key, options) {
    var maxLength, opt, result;

    opt = options.hash || {};
    maxLength = opt.max;
    result = i18n.t(i18n_key);
    if ((maxLength != null) && maxLength < result.length) {
      result = "" + (result.slice(0, +maxLength)) + "...";
    }
    return new Handlebars.SafeString(result);
  });

  Handlebars.registerHelper("display_for", function(property, options) {
    var maxLength, opt, reduce, res, result, str, _i, _len, _ref;

    opt = options.hash || {};
    maxLength = opt.max;
    if (this[property] != null) {
      result = this[property];
    } else {
      return "";
    }
    reduce = function(s, max) {
      if (s.length > max) {
        return "" + (s.slice(0, +maxLength)) + "... ";
      } else {
        return "" + s + " ";
      }
    };
    if ((maxLength != null) && (result != null)) {
      str = "";
      _ref = result.split(' ');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        res = _ref[_i];
        str += reduce(res, maxLength);
      }
      return new Handlebars.SafeString(str);
    }
    return new Handlebars.SafeString(result);
  });

  Handlebars.registerHelper("debug", function(optionalValue) {
    console.log("Current Context");
    console.log("====================");
    console.log(this);
    if (optionalValue) {
      console.log("Value");
      console.log("====================");
      return console.log(optionalValue);
    }
  });

  getMetadataFor = function(property, context) {
    var domainOfModel, md, metadata;

    metadata = {};
    if (context != null) {
      if (context['metadatas'] != null) {
        md = context['metadatas'][property];
      }
      if ((md == null) && (domains_definition != null)) {
        domainOfModel = domains_definition[context['modelName']];
        if (domainOfModel != null) {
          md = {
            metadata: domainOfModel[property]
          };
        }
      }
      if (md != null) {
        if (md.metadata != null) {
          _.extend(metadata, md.metadata);
        }
        if (md.required != null) {
          _.extend(metadata, {
            required: md.required
          });
        }
        if (md.label != null) {
          _.extend(metadata, {
            label: md.label
          });
        }
        if (md.domain != null) {
          _.extend(metadata, {
            domain: md.domain
          });
        }
      }
    }
    return metadata;
  };

  /*------------------------------------------- FORM FOR THE INPUTS -------------------------------------------
  */


  Handlebars.registerHelper("input_for", function(property, options) {
    var containerAttribs, containerCss, dataType, disabled, domain, error, errorSize, errorValue, errors, html, icon, inputAttributes, inputSize, isAddOnInput, isDisplayRequired, isRequired, label, labelSize, labelSizeValue, metadata, opt, placeholder, propertyValue, readonly, translationKey, translationRoot,
      _this = this;

    html = void 0;
    translationRoot = void 0;
    dataType = void 0;
    opt = options.hash || {};
    metadata = getMetadataFor(property, this);
    domain = domains_definition[metadata.domain] || {};
    isDisplayRequired = false;
    isRequired = function() {
      isDisplayRequired = false;
      if (opt.isRequired != null) {
        isDisplayRequired = opt.isRequired;
      } else if (metadata.required != null) {
        isDisplayRequired = metadata.required;
      }
      if (isDisplayRequired) {
        return "<span class='input-group-addon'>*</span>";
      } else {
        return "";
      }
    };
    translationRoot = opt.translationRoot || void 0;
    dataType = opt.dataType || domain.type || "text";
    if (dataType === "boolean") {
      dataType = "checkbox";
    }
    readonly = opt.readonly || false;
    readonly = readonly ? "readonly" : "";
    disabled = opt.disabled || false;
    disabled = disabled ? "disabled" : "";
    inputAttributes = opt.inputAttributes || "";
    containerAttribs = opt.containerAttribs || "";
    containerCss = opt.containerCss || "";
    labelSizeValue = opt.isNoLabel ? 0 : opt.labelSize ? opt.labelSize : 4;
    labelSize = "col-sm-" + labelSizeValue + " col-md-" + labelSizeValue + " col-lg-" + labelSizeValue;
    inputSize = function() {
      var inputSizeValue;

      if (opt.containerCss) {
        return inputSize = "";
      } else {
        inputSizeValue = 12 - labelSizeValue;
        return inputSize = opt.inputSize || ("col-sm-" + inputSizeValue + " col-md-" + inputSizeValue + " col-lg-" + inputSizeValue);
      }
    };
    isAddOnInput = (opt.icon != null) || (opt.isRequired || metadata.required) === true;
    propertyValue = function() {
      var formatedDate;

      if (_this[property] != null) {
        if (dataType === "checkbox") {
          if (_this[property]) {
            return 'checked';
          }
        }
        if (dataType === "date" && _this[property] !== "") {
          formatedDate = moment(_this[property]).format("YYYY-MM-DD");
          return "value='" + formatedDate + "'";
        } else {
          return "value='" + (_.escape(_this[property])) + "'";
        }
      }
      return "";
    };
    translationKey = function() {
      var translation;

      translation = metadata.label || (_this['modelName'] != null ? "" + _this['modelName'] + "." + property : void 0) || "";
      if (translationRoot != null) {
        translation = ((translationRoot != null) && typeof translationRoot === "string" ? translationRoot + "." : "") + property;
      }
      if (translation === "") {
        return "";
      } else {
        return i18n.t(translation);
      }
    };
    icon = function() {
      if (opt.icon != null) {
        return "<span class='input-group-addon'><i class='fa fa-" + opt.icon + "  fa-fw'></i> </span>";
      } else {
        return "";
      }
    };
    label = function() {
      if (opt.isNoLabel != null) {
        return "";
      } else {
        return "<label class='control-label " + labelSize + "' for='" + property + "'>" + (translationKey()) + "</label>";
      }
    };
    placeholder = (opt.placeholder == null) || opt.placeholder ? "placeholder='" + (translationKey()) + "'" : "";
    error = "";
    if ((this.errors != null) && (this.errors[property] != null)) {
      error = "has-error";
    }
    errorValue = (this.errors != null) && (this.errors[property] != null) ? this.errors[property] : "";
    errorSize = function() {
      var errorLength, offsetError;

      errorLength = 12 - labelSizeValue;
      offsetError = labelSizeValue;
      return "col-sm-" + errorLength + " col-md-" + errorLength + " col-lg-" + errorLength + " col-sm-offset-" + offsetError + " col-md-offset-" + offsetError + " col-lg-offset-" + offsetError;
    };
    errors = function() {
      if (error === "has-error") {
        return "<span class='" + error + " " + (errorSize()) + " help-inline pull-left' style='color:#b94a48'> " + errorValue + " </span>";
      } else {
        return "";
      }
    };
    html = "          <div class='form-group " + error + "'>            " + (label()) + "            <div class='" + (isAddOnInput ? 'input-group' : "") + " " + (inputSize()) + " " + containerCss + "' " + containerAttribs + ">               " + (icon()) + "              <input id='" + property + "' class='form-control input-sm' data-name='" + property + "' type='" + dataType + "' " + inputAttributes + " " + placeholder + " " + (propertyValue()) + " " + readonly + " " + disabled + "/>              " + (isRequired()) + "            </div>            " + (errors()) + "          </div>        ";
    return new Handlebars.SafeString(html);
  });

  Handlebars.registerHelper("options_selected", function(property, options) {
    var addOption, dataMapping, domain, elt, error, errorValue, errors, html, icon, inputSize, inputSizeValue, isAddOnInput, isAtLine, isRequired, jsonGiven, label, labelSize, labelSizeValue, list, metadata, opt, optMapping, optName, optToTriggerListKey, optToTriggerName, readonly, selected, translationKey, translationRoot, _i, _len,
      _this = this;

    opt = options.hash || {};
    optName = opt.optName != null ? "data-name='" + opt.optName + "'" : "";
    optToTriggerName = opt.optToTriggerName != null ? "data-opttotrigger-name='" + opt.optToTriggerName + "'" : "";
    optToTriggerListKey = opt.optToTriggerListKey != null ? "data-opttotrigger-listkey='" + opt.optToTriggerListKey + "'" : "";
    optMapping = opt.optMapping != null ? this[opt.optMapping] : null;
    dataMapping = optMapping != null ? "data-mapping=" + optMapping : "";
    list = this[opt.listKey] || [];
    selected = this[property] || opt.selected || void 0;
    if (opt.addDefault) {
      list = [
        {
          id: void 0,
          label: ''
        }
      ].concat(list);
    }
    metadata = getMetadataFor(property, this);
    domain = domains_definition[metadata.domain] || {};
    isRequired = function() {
      var isDisplayRequired;

      isDisplayRequired = false;
      if (opt.isRequired != null) {
        isDisplayRequired = opt.isRequired;
      } else if (metadata.required != null) {
        isDisplayRequired = metadata.required;
      }
      if (isDisplayRequired) {
        return "<span class='input-group-addon'>*</span>";
      } else {
        return "";
      }
    };
    translationRoot = opt.translationRoot || void 0;
    isAtLine = opt.isAtLine || false;
    readonly = opt.readonly || false;
    readonly = readonly ? "disabled" : "";
    labelSizeValue = opt.isNoLabel ? 0 : opt.labelSize ? opt.labelSize : 4;
    labelSize = "col-sm-" + labelSizeValue + " col-md-" + labelSizeValue + " col-lg-" + labelSizeValue;
    inputSizeValue = 12 - labelSizeValue;
    inputSize = opt.inputSize || ("col-sm-" + inputSizeValue + " col-md-" + inputSizeValue + " col-lg-" + inputSizeValue);
    translationKey = function() {
      var translation;

      translation = metadata.label || (_this['modelName'] != null ? "" + _this['modelName'] + "." + property : void 0) || "";
      if (translationRoot != null) {
        translation = ((translationRoot != null) && typeof translationRoot === "string" ? translationRoot + "." : "") + property;
      }
      if (translation === "") {
        return "";
      } else {
        return i18n.t(translation);
      }
    };
    icon = function() {
      if (opt.icon != null) {
        return "<span class='input-group-addon'><i class='fa fa-" + opt.icon + " fa-fw'></i> </span>";
      } else {
        return "";
      }
    };
    isAddOnInput = (opt.icon != null) || (opt.isRequired || metadata.required) === true;
    label = function() {
      if (opt.isNoLabel == null) {
        if (isAtLine) {
          return "<div class='row'><label class='control-label for='" + property + "'> " + (translationKey()) + " </label></div>";
        } else {
          return "<label class='control-label " + labelSize + "' for='" + property + "'> " + (translationKey()) + " </label>";
        }
      } else {
        return "";
      }
    };
    error = "";
    if ((this.errors != null) && (this.errors[property] != null)) {
      error = "has-error";
    }
    errorValue = (this.errors != null) && (this.errors[property] != null) ? this.errors[property] : "";
    errors = function() {
      if (error === "has-error") {
        return "<span class='" + error + " help-inline pull-left' style='color:#b94a48'> " + errorValue + " </span>";
      } else {
        return "";
      }
    };
    jsonGiven = this;
    addOption = function(elt) {
      var id, isSelected, prop;

      id = elt.id;
      prop = elt.label;
      isSelected = (selected != null) && (id != null) && id.toString() === selected.toString() ? "selected" : "";
      html += "<option value= '" + id + "' data-name='" + property + "' " + isSelected + ">" + prop + "</option>";
      return void 0;
    };
    html = "<div class='form-group " + error + "'>            " + (label()) + "            <div class='controls " + inputSize + "'>              <div class='input-group'>                " + (icon()) + "                                <select id='" + property + "' " + readonly + " " + optName + " " + optToTriggerName + " " + optToTriggerListKey + " " + dataMapping + " class='form-control input-sm'>";
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      elt = list[_i];
      addOption(elt);
    }
    html += "</select>" + (isRequired()) + "               </div>              " + (errors()) + "            </div>          </div>";
    return new Handlebars.SafeString(html);
  });

  Handlebars.registerHelper("dateFormat", function(_date, options) {
    var format, formatedDate, opt;

    formatedDate = '';
    if (_date) {
      opt = options.hash || {};
      format = opt.format || require('../config').dateFormat;
      formatedDate = moment(_date).format(format);
    }
    return new Handlebars.SafeString(formatedDate);
  });

  S4 = function() {
    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
  };

  guid = function() {
    return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
  };

  Handlebars.registerHelper("button", function(text_key, options) {
    var button, cssClass, cssId, icon, isScript, opt, script, type;

    opt = options.hash || {};
    isScript = typeof opt.isScript === "undefined" ? true : opt.isScript;
    cssClass = opt["class"] || "";
    cssId = opt.id || guid();
    type = opt.type || "button";
    script = function() {
      if (isScript && type === 'submit') {
        return "<script type='text/javascript'>$('#" + cssId + "').on('click', function(){$(this).button('loading');});</script>";
      } else {
        return "";
      }
    };
    icon = function() {
      if (opt.icon != null) {
        return "<i class='fa fa-fw fa-" + opt.icon + "'></i>";
      } else {
        return "";
      }
    };
    button = "<button type='" + type + "' class='btn " + cssClass + "' id='" + cssId + "' data-loading-text='" + (i18n.t('button.loading')) + "'>" + (icon()) + " " + (text_key !== '' ? i18n.t(text_key) : '') + "</button>" + (script());
    return new Handlebars.SafeString(button);
  });

  Handlebars.registerHelper("paginate", function(property, options) {
    var currentPage, endPage, firstPage, generateLeftArrow, generatePageNumber, generateRigthArrow;

    options = options || {};
    options = options.hash || {};
    currentPage = this.currentPage;
    firstPage = this.firstPage || 0;
    endPage = (this.totalPages || 0) + firstPage;
    generateLeftArrow = function() {
      var className;

      className = currentPage === firstPage ? "disabled" : "";
      return "<li class='" + className + "' data-page='" + firstPage + "'><a href='#' data-bypass>&laquo;</a></li>";
    };
    generatePageNumber = function() {
      var html, i, _i;

      html = "";
      for (i = _i = firstPage; firstPage <= endPage ? _i <= endPage : _i >= endPage; i = firstPage <= endPage ? ++_i : --_i) {
        html += "<li class='" + (i === currentPage ? 'active' : '') + "'><a href='#' data-bypass data-page='" + i + "'>" + i + "</a></li>";
      }
      return html;
    };
    generateRigthArrow = function() {
      var className;

      className = currentPage === endPage ? "disabled" : "";
      return "<li class='" + className + "' data-page='" + endPage + "'><a href='#' data-bypass>&raquo;</a></li>";
    };
    return new Handlebars.SafeString("<ul class='pagination'>" + (generateLeftArrow()) + (generatePageNumber()) + (generateRigthArrow()) + "</ul>");
  });

  Handlebars.registerHelper("sortColumn", function(property, options) {
    var generateSortPosition, order, sortField, translationKey;

    options = options.hash || {};
    sortField = this.sortField;
    order = this.order || "asc";
    translationKey = options.translationKey || void 0;
    generateSortPosition = function() {
      var icon;

      icon = "fa fa-sort";
      if (property === sortField) {
        icon += "-" + order;
      }
      return "<i class='" + icon + "' data-name='" + property + "'></i>";
    };
    return new Handlebars.SafeString("<a class='sortColumn' href='#' data-name='" + property + "' data-bypass>" + (i18n.t(translationKey)) + " " + (generateSortPosition()) + "</a>");
  });

  /*Handlebars.registerHelper "currency",(property, options) ->  
    currencySymbol = ''
    value = ''
    if (+this[property])? or +this[property] is 0
      value = +this[property]
    if typeof value is 'number'
      value = numeral(value).format(require('./configuration').getConfiguration().format.currency) if value isnt ''#value.toFixed('2') 
      new Lawnchair({name: 'products'}, $.noop).get('currency', (curr)-> currencySymbol = curr.currencySymbol)
    html = "<div class='currency'><div class='right'>#{value} #{currencySymbol}</div></div>"
    new Handlebars.SafeString(html)
  */


}).call(this);

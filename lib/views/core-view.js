/*global Backbone, _, window, Promise, $ */
"use strict";
(function(NS) {
  //Filename: views/core-view.js
  NS = NS || {};
  var isInBrowser = typeof module === 'undefined' && typeof window !== 'undefined';
  var postRenderingBuilder = isInBrowser ? NS.Helpers.postRenderingBuilder : require('../helpers/post_rendering_builder');
  var ErrorHelper = isInBrowser ? NS.Helpers.errorHelper : require('../helpers/error_helper');
  var RefHelper = isInBrowser ? NS.Helpers.referenceHelper : require('../helpers/reference_helper');
  var ArgumentNullException = isInBrowser ? NS.Helpers.Exceptions.ArgumentNullException : require("../helpers/custom_exception").ArgumentNullException;
  var Model =  isInBrowser ? NS.Models.Model : require("../models/model");
  //View which is the default view for each view.
  //This view is able to deal with errors and to render the default json moodel.
  var CoreView = Backbone.View.extend({
    toogleIsHidden: function(options) {
      this.isHidden = !this.isHidden;
      this.render(options);
    },
    //Reference lists names. 
    //These _names_, must have been registered inside the the application to be used.
    referenceNames: undefined,

    //Options define by default for the view.
    defaultOptions: {
      isElementRedefinition: false //This options is use in order to not have a tag container generated by Backbone arround the view.
    },
    //Options overriden By the instanciate view.
    customOptions: {},

    //This property is use in order to create a new Model if no model are define in the view.
    modelName: undefined,

    //Initialization of the coreview.
    initialize: function initializeCoreView(options) {
      options = options || {};
      //Define default options foreach _core_ view, and override these options for each _project view_.
        //Then each view will have access to options in any methods.
      this.opts = _.extend({},this.defaultOptions, this.customOptions, options);

      this.on('toogleIsHidden', this.toogleIsHidden);

      this.initializeModel();

      /*Register after renger.*/
      _.bindAll(this, 'render', 'afterRender');
      var _this = this;
      this.render = _.wrap(this.render, function(render, options) {
        render(options);
        _this.afterRender();
        return _this;
      });

      //Load all the references lists which are defined in referenceNames.
      var currentView = this;
      Promise.all(RefHelper.loadMany(this.referenceNames)).then(function(results) {
        //console.log('resultsreferenceNames', results);
        var res = {}; //Container for all the results.
        for (var i = 0, l = results.length; i < l; i++) {
          res[currentView.referenceNames[i]] = results[i];
          //The results are save into an object with a name for each reference list.
        }
        currentView.model.set(res); //This trigger a render due to model change.
        currentView.isReady = true; //Inform the view that we are ready to render well.
      }).then(null, function(error) {
        ErrorHelper.manageResponseErrors(error, {
          isDisplay: true
        });
      });
    },

    //Initialize the model of the view.
    //In order to be able to be initialize, a view must have a _model_ or a _modelName_.
    initializeModel: function initializeModelCoreView() {
      if (this.model) {
        return;
      } else if (this.opts.modelName) {
          this.model = new Model();
          this.model.modelName = this.opts.modelName;
      } else {
        throw new ArgumentNullException("The view must have a model or a model name.", this);
      }
    },
    //The handlebars template has to be defined here.
    template: function emptyTemplate(json) {
      console.log("templateData", json);
      return "<p>Your template has to be implemented.</p>";
    }, // Example: require('./templates/coreView')
    //Defaults events.
    events: {
      "focus input": "inputFocus", //Deal with the focus in the field.
      "blur input": "inputBlur", //Deal with the focus out of the field.
      "click .panel-collapse.in": "hideCollapse",
      "click .panel-collapse:not('.in')": "showCollapse"
    },
    //Input focus event.
    inputFocus: function coreViewInputFocus(event) {
      if (!this.model.has('errors')) {
        return;
      }
      //Remove the input hidden attribute.
      return event.target.parentElement.parentElement.childNodes[5].removeAttribute('hidden');
    },
    //Input blur event gestion
    inputBlur: function coreViewInputBlur(event) {
      if (!this.model.has('errors')) {
        return;
      }
      //If there is an error add the hidden attribute into it in odere to hide the errors.
      return event.target.parentElement.parentElement.childNodes[5].setAttribute("hidden", "hidden");
    },
    //This method is use in order to inject json data to the template. By default, the this.model.toJSON() is called.
    getRenderData: function getCoreViewRenderData() {
      return this.model.toJSON();
    },
    showCollapse: function showCollapseCoreView() {
      $('.collapse', this.$el).collapse('show');
    },
    hideCollapse: function hideCollapseCoreView() {
      $('.collapse', this.$el).collapse('hide');
    },
    toogleCollapse: function toogleCollapseCoreView(event) {
      $(".panel-collapse.in", event.target.parentNode.parentNode).collapse('hide'); //todo: change the selector
      $(".panel-collapse:not('.in')", event.target.parentNode.parentNode).collapse('show');
    },
    //Render function  by default call the getRenderData and inject it into the view dom element.
    render: function renderCoreView() {
      this.$el.html(this.template(this.getRenderData()));
      //_.defer(this.afterRender, this);
      return this;
    },
    afterRender: function afterRenderCoreView() {
      //Eventually pass the currentview as argument for this binding.
      postRenderingBuilder({
        model: this.model,
        viewSelector: this.$el
      });
      $('.collapse', this.$el).collapse({
        toogle: true
      });
    }
  });

  // Differenciating export for node or browser.
  if (isInBrowser) {
    NS.Views = NS.Views || {};
    NS.Views.CoreView = CoreView;
  } else {
    module.exports = CoreView;
  }
})(typeof module === 'undefined' && typeof window !== 'undefined' ? window.Fmk : module.exports);
// ## Example calll:
// ```javascript
// var CoreView = require('./views/core-view');
// new CoreView({model: new Model({firstName: "first name", lastName: "last name"}).render().el //Get the dom element of the view.
//```
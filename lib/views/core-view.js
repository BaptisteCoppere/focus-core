/*global Backbone, _, window, Promise, $ */
"use strict";
//Filename: views/core-view.js
/**
 * @module fmk/views/CoreView
 */

var postRenderingBuilder = require('../helpers/post_rendering_builder');
var ErrorHelper = require('../helpers/error_helper');
var RefHelper = require('../helpers/reference_helper');
var ArgumentNullException = require("../helpers/custom_exception").ArgumentNullException;
var Model = require("../models/model");
var PaginatedCollection = require("../models/paginatedCollection");
var sessionHelper = require('../helpers/session_helper');

var templateSpinner = require('../templates/hbs/spinner.hbs');

/**
 * View which is the default view for each view.
 * This view is able to deal with errors and to render the default json model.
 * @class
 * @alias module:fmk/views/CoreView
 */
var CoreView = Backbone.View.extend({
    toogleIsHidden: function(options) {
        this.isHidden = !this.isHidden;
        this.render(options);
    },
    // Reference lists names.
    // These _names_, must have been registered inside the the application to be used.
    referenceNames: undefined,

    /**
     * Options define by default for the view.
     * @enum
     * @virtual
     */
    defaultOptions: {
        /**
         * This options is use in order to not have a tag container generated by Backbone around the view.
         * (type {boolean], default value : false)
         */
        isElementRedefinition: false,
        /**
         * Indicate if references values are ready.
         * (type {boolean], default value : true)
         */
        isReadyReferences: true,
        /**
         * Activate debug information.
         * (type {boolean], default value : false)
         */
        DEBUG: false
    },
    /**
     * Options overriden By the instanciate view.
     */
    customOptions: {},

    // This property is use in order to create a new Model if no model are define in the view.
    modelName: undefined,

    /**
     * Initialization of the CoreView.
     * @param options
     * @virtual
     */
    initialize: function initializeCoreView(options) {
        options = options || {};
        // Define default options foreach _core_ view, and override these options for each _project view_.
        // Then each view will have access to options in any methods.
        this.opts = _.extend({}, this.defaultOptions, this.customOptions, options);

        this.on('toogleIsHidden', this.toogleIsHidden);
        this.initializeModel();

        // Register after render.
        _.bindAll(this, 'render', 'afterRender');
        var _this = this;
        this.render = _.wrap(this.render, function(render, options) {
            // If the view is ready perform the standard render.
            if (_this.isReady()) {
                if (_this.opts.DEBUG) {
                    _this.debug();
                }
                render(options);
                _this.afterRender();
            } else {
                // Else render the spinner.
                this.renderSpinner();
            }
            return _this;
        });

        // Listen to the reference list loading.
        this.listenTo(this.model, "references:loaded", this.render, this);

        // Load all the references lists which are defined in referenceNames.
        var currentView = this;
        if (_.isArray(this.referenceNames) && this.referenceNames.length > 0) {
            this.opts.isReadyReferences = false;
            Promise.all(RefHelper.loadMany(this.referenceNames)).then(function(results) {
                currentView.opts.isReadyReferences = true;
                //console.log('resultsreferenceNames', results);
                var res = {}; //Container for all the results.
                for (var i = 0, l = results.length; i < l; i++) {
                    res[currentView.referenceNames[i]] = results[i];
                    // The results are save into an object with a name for each reference list.
                }
                // Add the reference lists as model properties.
                currentView.model.references = res; // Add all the references into the
                currentView.model.trigger('references:loaded');
                // Inform the view that we are ready to render well.
            }).then(null, function(error) {
                currentView.opts.isReadyReferences = true;
                currentView.render();
                ErrorHelper.manageResponseErrors(error, {
                    isDisplay: true
                });
            });
        }

        this.registerSessionHelper(this);
    },
    /**
     * Register session helper
     * @param {CoreView} context execution context
     * @private
     */
    registerSessionHelper: function registerSessionHelper(context){
        context.session = {
            save : function saveItem(item){
                return sessionHelper.saveItem(context.getSessionKey(), item);
            },
            get : function getItem(){
                return sessionHelper.getItem(context.getSessionKey());
            },
            delete : function deleteItem(){
                return sessionHelper.removeItem(context.getSessionKey());
            }
        };
    },
    /**
     * Initialize the model of the view.
     * In order to be able to be initialize, a view must have a _model_ or a _modelName_.
     */
    initializeModel: function initializeModelCoreView() {
        if (this.model) {
            return;
        } else if (this.opts.modelName) {
            // Create collection or model
            var ModelCreated = Model.extend({
                modelName: this.opts.modelName
            });
            // Case of a collection.
            if (this.opts.modelType !== undefined && this.opts.modelType === "collection") {
                var CollectionCreated = PaginatedCollection.extend({
                    modelName: this.opts.modelName,
                    model: ModelCreated
                });
                this.model = new CollectionCreated();
            } else {
                // Case of a model.
                this.model = new ModelCreated();

            }
        } else {
            throw new ArgumentNullException("The view must have a model or a model name.", this);
        }
    },
    // The handlebars template has to be defined here.
    template: function emptyTemplate(json) {
        console.log("templateData", json);
        return "<p>Your template has to be implemented.</p>";
    }, // Example: require('./templates/coreView'),
    templateSpinner: templateSpinner,
    // Defaults events.
    events: {
        "focus input": "inputFocus", // Deal with the focus in the field.
        "blur input": "inputBlur", // Deal with the focus out of the field.
        "click .panel-collapse.in": "hideCollapse",
        "click .panel-collapse:not('.in')": "showCollapse",
        "click button[data-loading]": "loadingButton"
    },
    /**
     * Input focus event.
     * @param event
     * @returns {*}
     */
    inputFocus: function coreViewInputFocus(event) {
        if (!this.model.has('errors')) {
            return;
        }
        // Remove the input hidden attribute.
        return event.target.parentElement.parentElement.childNodes[5].removeAttribute('hidden');
    },
    /**
     * Input blur event processing
     * @param event
     * @returns {*}
     */
    inputBlur: function coreViewInputBlur(event) {
        if (!this.model.has('errors')) {
            return;
        }
        //If there is an error add the hidden attribute into it in odere to hide the errors.
        return event.target.parentElement.parentElement.childNodes[5].setAttribute("hidden", "hidden");
    },
    /**
     * This method is use in order to inject json data to the template. By default, the this.model.toJSON() is called.
     * @returns {*|string}
     * @virtual
     */
    getRenderData: function getRenderDataCoreView() {
        var jsonToRender = this.model.toJSON();
        if (this.model.references) {
            _.extend(jsonToRender, this.model.references);
        }
        return jsonToRender;
    },
    /**
     * Show collapse.
     */
    showCollapse: function showCollapseCoreView() {
        $('.collapse', this.$el).collapse('show');
    },
    /**
     * Hide collapse
     */
    hideCollapse: function hideCollapseCoreView() {
        $('.collapse', this.$el).collapse('hide');
    },
    /**
     * Toggle collapse.
     * @param event
     */
    toogleCollapse: function toogleCollapseCoreView(event) {
        $(".panel-collapse.in", event.target.parentNode.parentNode).collapse('hide'); //todo: change the selector
        $(".panel-collapse:not('.in')", event.target.parentNode.parentNode).collapse('show');
    },
    /**
     * Debug the core View. Display whatever you need in the console on render.
     * @return {undefined}
     */
    debug: function debugCoreView() {
        console.log("--------------CORE VIEW-----------------");
        console.log("View:     ", this);
        console.log("Model:    ", this.model);
        if (this.template) {
            console.log("Template: ", this.template(this.getRenderData()));
        }
        console.log("----------------------------------------");
    },
    /**
     * Render function  by default call the getRenderData and inject it into the view dom element.
     * @param options
     * @returns {CoreView}
     * @virtual
     */
    render: function renderCoreView(options) {
        // If the view is not ready.
        this.$el.html(this.template(this.getRenderData()));

        //_.defer(this.afterRender, this);
        return this;
    },
    /**
     * Process post rendering logic.
     * @virtual
     */
    afterRender: function afterRenderCoreView() {
        // Eventually pass the current view as argument for this binding.
        postRenderingBuilder({
            model: this.model,
            viewSelector: this.$el
        });
        $('.collapse', this.$el).collapse({
            toogle: true
        });
    },
    /**
     * Get the id of the criteria.
     * @returns {string}
     * @virtual
     */
    getSessionKey: function getSessionKey() {
        var hash = window.location.hash;
        if (this.model.modelName !== undefined) {
            hash += this.model.modelName;
        }
        return hash;
    },
    /**
     * Call the history back.
     * @return {undefined}
     */
    back: function back() {
        Backbone.history.history.back();
    },
    /**
     * Function which tells if the view is ready to be display.
     * @returns {boolean}
     */
    isReady: function isReady() {
        return this.opts.isReadyReferences === true;
    },
    /**
     * Render spinner.
     * @returns {CoreView}
     */
    renderSpinner: function renderSpinner() {
        this.$el.html(this.templateSpinner(this.getRenderData()));
        return this;
    },
    /**
     * Change the button state (loading, reset) ...
     * @param  {string} selector - CSS selector for the button.
     * @param  {string} state    - The new state you want for the button.
     * @return {undefined}
     */
    changeButtonState: function changeButtonState(selector, state) {
        $(selector, this.$el).button(state);
    }
});

module.exports = CoreView;
// ## Example call:
// ```javascript
// var CoreView = require('./views/core-view');
// new CoreView({model: new Model({firstName: "first name", lastName: "last name"}).render().el //Get the dom element of the view.
//```